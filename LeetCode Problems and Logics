pattern 
        *
      *    * 
   *     *    *
we are given glasses ith row has i no of glasses and each glass can store 1 cup of wine . else wine will be poured to left and 
right glass . we will be given some quantity of wine and we have to find jth glass of ith row will contain what amount of wine . 
following is the code . 

double champagneTower(int poured, int query_row, int query_glass) {
        vector<double>currRow(1,poured);

        for(int i=0;i<=query_row ; i++)
        {
            vector<double>nextRow(i+2,0);
            for(int j=0;j<=i;j++)
            {
                if(currRow[j] >=1 )
                {
                    nextRow[j] +=(currRow[j]-1)/2.0;
                    nextRow[j+1]+=(currRow[j]-1)/2.0;
                    currRow[j]=1;
                }
            }
            if(i != query_row )
            currRow=nextRow;
        }
        return currRow[query_glass];
    }

* N-Queen Logic 
bool isSafe(int row , int col , vector<string>&board ,  int n)
{
    int r=row;
    int c=col;

    while(r>=0 && c>=0)
    {
        if(board[r][c]=='Q')
        return false;

        r--;
        c--;
    }
    r=row;
    c=col;

    while(c>=0 && r<n)
    {
        if(board[r][c]== 'Q')
        return false;

        r++;
        c--;
    }
    r=row;
    c=col;

    while(c>=0)
    {
        if(board[r][c] == 'Q')
        return false;

        c--;
    }

    return true;
}
void solve(int col ,vector<string>& board , vector<vector<string>> &ans , int n)
{
    if(col == n)
    {
        ans.push_back(board);

        return ;
    }

    for(int row = 0 ; row < n ; row++ )
    {
        if(isSafe(row , col , board , n))
        {
            board[row][col]='Q';
            solve(col+1,board,ans,n);
            board[row][col]='.';
        }
    }
}
    vector<vector<string>> solveNQueens(int n) {
        
        vector<vector<string>>ans;

        vector<string>board(n);

        string s(n,'.');

        for(int i=0;i<n;i++)
        {
            board[i]=s;
        }

        solve(0,board,ans,n);

        return ans;


    }
};

Q. Longest valid paranthisis
int longestValidParentheses(string s) {
        

        int t=0,ans=0;

        stack<int>st;
        st.push(-1);

        for(auto i:s)
        {
            if(i == '(')
            st.push(t);

            else{

                 if( !st.empty() && st.top() != -1 && s[st.top()] == '(')
                {
                    st.pop();
                    ans=max(ans,t-st.top());
                }
                else
                st.push(t);
            }
            t++;

        }
        return ans;

    }
Q Given a sorted integer array nums and an integer n, add/patch elements to the array such that any number in the range [1, n] 
inclusive can be formed by the sum of some elements in the array.

Return the minimum number of patches required.

 

Example 1:

Input: nums = [1,3], n = 6
Output: 1
 int minPatches(vector<int>& nums, int n) {
        long long sum=0,cnt=0,i=0;

        while(sum < n)
        {
            if(i  < nums.size() && nums[i] <=sum+1)
            sum+=nums[i++];

            else{
                cnt++;
                sum+=sum+1;
            }
        }
        return cnt;
    }


Q. Given a sorted integer array nums and an integer n, add/patch elements to the array such that any number in the range [1, n] inclusive can be formed by the sum of some elements in the array.

Return the minimum number of patches required.

int sumOfFlooredPairs(vector<int>& nums) {
	vector<long> freq(2*MAXN+1);        
	long mx = 0, sum = 0;
	for(auto num : nums) ++freq[num], mx = max((int)mx, num);  // counting frequency of each element in nums
	for(int i = 1; i <= 2*MAXN; ++i) freq[i] += freq[i - 1];   // building prefix sum array of freq. Now freq[i] will hold the frequency of numbers less than or equal to i
	// Each num will be assumed in the denominator as floor(nums[i] / num) and 
	// using freq array, we can calculate the number of terms contributing 1, 2, 3... to the sum each.
	for(auto num : nums) { 
		long l = num, r = 2 * num - 1, divResult = 1;
		while(l <= mx) {                
			sum = (sum + divResult * (freq[r] - freq[l - 1])) % MOD;
			l += num, r += num;
			++divResult;
		}
	}
	return sum;
}

ANother Approach :

    int sumOfFlooredPairs(vector<int>& A) {
        long mod = 1e9 + 7, N = A.size(), ans = 0;
        sort(begin(A), end(A));
        for (int i = 0; i < N; ) {
            long j = i + 1;
            while (j < N && A[j] == A[j - 1]) ++j; // skip the duplicates of `A[i]`
            long dup = j - i;
            ans = (ans + dup * dup % mod) % mod; // the `dup` duplicates add `dup * dup` to the answer
            while (j < N) {
                long div = A[j] / A[i], bound = A[i] * (div + 1);
                long next = lower_bound(begin(A) + j, end(A), bound) - begin(A); // find the first number `A[next] >= A[i] * (div + 1)`
                ans = (ans + (next - j) * div % mod * dup % mod) % mod; // Each A[t] (j <= t < next) will add `div * dup` to the answer.
                j = next;
            }
            i += dup;
        }
        return ans;
    }

Q Split Sum Array : make k subarray of the array so that the largest sum will come out to be minimum . 
 private:
    int countPartitions(vector<int>nums , int maxSum)
    {
        int partitions =1; 
        long long subSum=0;

        for(int i=0;i<nums.size();i++)
        {
            if(subSum + nums[i] <= maxSum)
            subSum+=nums[i];

            else{
                partitions++;
                subSum=nums[i];
            }
        }
        return partitions ;
    }
public:

    
    int splitArray(vector<int>& nums, int k) {
        int low=*max_element(nums.begin(),nums.end());

        int high=accumulate(nums.begin(),nums.end(),0);

        while(low <= high){
            int mid=(low+high)/2;
            int partitions=countPartitions(nums,mid);
            if(partitions > k)
            low = mid+1;

            else
            high=mid-1;
        }
        return low;
    }
};

Q Given two arrays arr1 and arr2 . merge them without using extra space. arr1 ll contain first n elements and arr2 ll contain 
m elements . 

       class Solution{
    public:
        //Function to merge the arrays.
        void merge(long long arr1[], long long arr2[], int n, int m) 
        { 
            // code here 
             
             int f=n-1,s=0;
             
             while(s<m && f>=0)
             {
                 if(arr1[f]>arr2[s])
                 {
                     swap(arr1[f],arr2[s]);
                     f--;
                     s++;
                 }
                 else
                 break;
             }
             sort(arr1,arr1+n);
             sort(arr2,arr2+m);
            
        } 
};

Q. Given an array arranged in curcuilar fasion . your task is to find max contigeous subarray sum . 

class Solution{
    public:
    // arr: input array
    // num: size of array
    //Function to find maximum circular subarray sum.
    int circularSubarraySum(int arr[], int num){
        
        // your code here
        
          int total = 0, maxSum = arr[0], currMax = 0, minSum = arr[0], currMin = 0;
        for (int i=0;i<num;i++)
        {
            
            if(arr[i]>currMax+arr[i])
            currMax=arr[i];
            else currMax=currMax+arr[i];
            
            if(maxSum<currMax)
            maxSum=currMax;
          
            if(arr[i]<currMin+arr[i])
            currMin=arr[i];
            else currMin=currMin+arr[i];
            
            if(minSum>currMin)
            minSum=currMin;
           
            total=total+arr[i];
        }
        
     if(maxSum>0)
     {
         if(maxSum>total-minSum)
         return maxSum;
         else return(total-minSum);
     }
     else return maxSum;
    }
};

Q. you have N books each with A[i] pages . M students need to allocated contigeous books , with each students need to get 
allocated atleast a book .Find the permutation where the student with most no of books allocated to him gets least no of pages . 
N =4 , arr=[12,34,68,90]
o/p: 113 
//User function template in C++

class Solution 

{

    public:
    //Function to find minimum number of pages.
    bool helper(int books[],int n,int m,long long int x){
    long long sum=0;
    int part=1;
   for(int i=0;i<n;i++){
      if(books[i]>x) return false;
      if(sum+books[i]<=x){
       sum+=books[i];
       }
       else{
       part++;
       sum=books[i];
      if(part>m) return false;
       }
        }
 return true;
    }
    //Function to find minimum number of pages.
    int findPages(int A[], int N, int M) 
    {
    if(N<M) return -1;
    long long int ans=int(1e15);
    long long  low=0;
    long long high=0;
    long long sum=0;
    for(int i=0;i<N;i++){
      sum+=A[i];
    }
    high=sum;
    //sort(A,A+N);
     while(low<=high){
        long long mid=(low+high)/2;
       if(helper(A,N,M,mid)){
       ans=ans<mid?ans:mid;
        high=mid-1;
        }
       else{
         low=mid+1;
      }
      }
        
     return ans;  
    }
};

Q Given an integer array nums and integer k . task is to check if nums can be divided into k non-empty sub-sets with equal sum .
nums:2,1,4,5,6
o/p: 2,4  1,5 6 means yes 

/*You are required to complete this method */

class Solution{
  public:
  bool func(int nums[],int i,int n,int k,vector<int> &us){
       if(!k){
           //cout<<"\n";
           return 1;
       }
       if(i==n) return 0;
       for(int j=i;j<n;j++){
           if(us[j] or nums[j]>k) continue;
           if(func(nums,j+1,n,k-nums[j],us)){
               us[j]++;
               //cout<<nums[j]<<" ";
               return 1;
           }
       }
       return 0;
   }
   bool isKPartitionPossible(int a[], int n, int k)
   {
        //Your code here
        vector<int> us(n,0);
        int s=0,b;
        sort(a,a+n,greater<int>());
        for(int i=0;i<n;i++) s+=a[i];
        if(s%k) return false;
        b=func(a,0,n,s/k,us);
        int c=0;
        while(b){
            c++;
            b=func(a,0,n,s/k,us);
        }
        if(c==k) return true;
        return false;
   }

};

Q . Given matrix m . find the max are rectangle created by 1's . 
/*You are required to complete this method*/

class Solution{
  public:
  int maxAreaHist(vector<int> arr, int n) {
        stack<int> s;
        
        long long maxArea = 0;
        
        for(int i = 0; i <= n; i++) {
            while(!s.empty() and(i == n or arr[s.top()] >= arr[i])) {
                long long height = arr[s.top()];
                s.pop();
                long long width;
                if(s.empty() == true) {
                    width = i;
                } else {
                    width =  i - s.top() - 1;
                }
                
                maxArea = max(maxArea, height*width);
            }
            s.push(i);
        }
        
        return maxArea;
    }
    int maxArea(int M[MAX][MAX], int n, int m) {
        // Your code here
        vector<int> height(m);
        
        for(int j = 0; j < m; j++) {
            height[j] = (M[0][j]);
        }
        
        int area = maxAreaHist(height, m);
        
        
        
        for(int i = 1; i < n; i++) {
            int local = 0;
            for(int j = 0; j < m; j++) {
                if(M[i][j] == 0) {
                    height[j] = 0;
                } else {
                    height[j] +=  1;
                }
            }
            
            
            local = maxAreaHist(height, m);
            
            area = max(area, local);
        }
        
        return area;
       
    }
};

Q  In stock market , a perosn buy a stock and sell it on some other day . person can do max k transaction . return the max 
profit he can bring out of market . 
class Solution {
  public:
  int f(int ind,int buy,int cap,int n,int a[],vector<vector<vector<int>>>&dp)
  {
      if(ind==n)
      return 0;
      
      if(cap==0)
      return 0;
      if(dp[ind][buy][cap]!=-1)
      return dp[ind][buy][cap];
      int profit=0;
      if(buy==1)
      {
          profit= max(f(ind+1,0,cap,n,a,dp)-a[ind],f(ind+1,1,cap,n,a,dp));
      }
      
      else{
           profit=max(f(ind+1,1,cap-1,n,a,dp)+a[ind],f(ind+1,0,cap,n,a,dp));
      }
    return   dp[ind][buy][cap]=profit;
  }
    int maxProfit(int K, int N, int A[]) {
        // code here
        vector<vector<vector<int>>>dp(N,vector<vector<int>>(2,vector<int>(K+1,-1)));
        return f(0,1,K,N,A,dp);
    }
};

better approach :
class Solution {
  public:


 

int solve(int i,int n,int prices[],int buys,int k,vector<vector<vector<int>>> &dp){
       if(i==n or k==0){
           return 0;
       }
       if(dp[i][buys][k]!=-1) return dp[i][buys][k];
       int profit=0;
       
       if(buys){
           profit=max(-prices[i]+solve(i+1,n,prices,0,k,dp),0+solve(i+1,n,prices,1,k,dp));
       }
       else{
           profit=max(prices[i]+solve(i+1,n,prices,1,k-1,dp),0+solve(i+1,n,prices,0,k,dp));
       }
       return dp[i][buys][k]=profit;
   }
   int maxProfit(int k, int n, int a[]) {
       vector<vector<vector<int>>> dp(n,vector<vector<int>>(2,vector<int>(k+1,-1)));
       return solve(0,n,a,1,k,dp);
   }
    
};
Best Approach:

class Solution {
  public:
    int maxProfit(int k, int n, int p[]) {
        // code here
       int c=k*2;
       vector<int> dp(c+1,0);
       for(int i=n-1;i>=0;i--){
           for(int j=c-1;j>=0;j--){
               if(j%2) dp[j]=max(p[i]+dp[j+1],dp[j]);
               else dp[j]=max(dp[j+1]-p[i],dp[j]);
           }
       }
       return dp[0];
    }
    
}

Q Given a sqr grid of size N . each cell of which contains integer cost which is cost to travel through that
cell . we have to from (0,0) to (n-1,n-1). return the min cost path to reach there . 


class Solution
{
    public:
    //Function to return the minimum cost to react at bottom
	//right cell from top left cell.
 
        // Code here
          int dx[4]={0,0,1,-1};
    int dy[4]={-1,1,0,0};

    int minimumCostPath(vector<vector<int>>& grid) 
    {
        int n=grid.size();
        vector<vector<int>> dp(n,vector<int>(n,INT_MAX));
        //create min heap
        priority_queue <pair<int,pair<int,int>>, vector<pair<int,pair<int,int>>>,greater<pair<int,pair<int,int>>> > st;  
        st.push({grid[0][0],{0,0}});
        dp[0][0]=grid[0][0];
        while(!st.empty())
        {
            
            auto ele=st.top();
            st.pop();
            int dis=ele.first;
            int x=ele.second.first;
            int y=ele.second.second;
            
            for(int i=0;i<4;i++)
            {
                int newx=x+dx[i];
                int newy=y+dy[i];
                if(newx>=0 && newx<n && newy>=0 && newy<n)
                {
                    if(dp[newx][newy]>dis+grid[newx][newy])
                    {
                        dp[newx][newy]=dis+grid[newx][newy];
                        st.push({dp[newx][newy],{newx,newy}});
                    }
                }
            }
        }
        
        return dp[n-1][n-1];
    }
};

Q. Given two string wild and pattern where wild string may contain wild card character and pattern string is a 
normal string . determine if the two strings match .following are the allowed wild card characters . 
* this can be replaced by any sequence or empty string . 
? this char in string wild can be replaced by any one character . 
// User function template for C++
class Solution{
    public:
    int t[1001][1001] ;
    int match(string wild, string patt , int i , int j){
        if(i < 0 && j < 0){
            return 1 ;
        }
        if(i< 0 || j<0){
            return 0 ;
        }
        if(t[i][j] != -1){
            return t[i][j] ;
        }
        if(wild[i] == patt[j]){
            return t[i][j] = match(wild , patt , i-1,j-1);
        }
        if(wild[i] == '?'){
            return t[i][j] = match(wild , patt , i-1,j-1) ; 
        }
        if(wild[i] == '*'){
        return t[i][j] = match(wild ,patt ,i-1,j) || match(wild,patt,i-1,j-1) ||match(wild,patt,i,j-1) ;
        }
        return 0 ; // CASE WHERE wild[i] != patt[j] 
        
    }
    bool match(string wild, string patt)
    {
        // code here
        int n = wild.size() , m = patt.size() ;
        memset(t,-1,sizeof(t)) ;
        return match(wild , patt , n-1 , m-1) ;
    }
};

Q. Longest Cycle in a Graph 
const int N=1e5+5;
vector<int>g[N];
vector<int>height(N);

const int AN=1;
const int EN=2;


class Solution {
    private:
    void dfs(int src, int depth , vector<int>&visited, int &
     longest_cycle
    ){
        if(visited[src] == AN)
        {
            longest_cycle = max(longest_cycle, depth-height[src]);
            return ;
        }
        if(visited[src]== EN)
        return ;

        visited[src]=AN;
        height[src]=depth;

        for(auto it:g[src])
        {
            dfs(it , depth+1 , visited , longest_cycle );
        }

        visited[src]=EN;

    }
public:
    int longestCycle(vector<int>& edges) {
        int n=edges.size();
        for(int i=0;i<n;i++)
        {
            if(edges[i] != -1)
            g[i].push_back(edges[i]);
        }

        int res=-1;

        vector<int>visited(n,false);
        for(int i=0;i<n;i++)
        dfs(i,1,visited,res);

        for(int i=0;i<n;i++)
        {
            height[i]=0;
            g[i].clear();
        }
        return res;
    }
};

Q. Number of Excellent pairs:count no of pairs where
set bits in
num1 AND num2 + num1 OR num2 >=k

typedef long long ll;
class Solution {
    private:
    int BitCount(int x)
    {
        int ans=0;
        for(int j=29;j>=0;j--)
        {
            if( (1<<j) & x)
            ans++;
        }
        return ans;
    }

public:
    long long countExcellentPairs(vector<int>& nums, int k) {

        set<int>uniq;

        for(auto i:nums)
        uniq.insert(i);

        vector<int>bits;
        for(auto i:uniq)
        {
            int cnt = BitCount(i);
            bits.push_back(cnt);
        }
        sort(bits.begin(), bits.end());

        int n=bits.size();
        int l=0,r=n-1;

        ll result =0;

        while(l<n && r>=0)
        {
            if(bits[l] + bits[r] < k)
            l++;
            else{
                result+=(n-l);
                r--;
            }
        }
        return result;
        
    }
};

here, set bits in num1 & num2 + num1 or num2 is equivalent 
to total set bits in num1 + total set bits in num2 . 
simply check how many pairs are there which has total no of
set bits >=k


Q. Shortest Impossible Sequence 
See, there is a dice which is rolled n times and it has
k numbers . we have to find shortest length sequence that is 
impossile to make by the given sequence of rolls.
rolls = [4,2,1,2,3,3,2,4,1], k = 4
Output: 3




Q. Mulriply Two strings 

class Solution {
public:
    string multiply(string num1, string num2) {
        
        if( num1 == "0" || num2 == "0")
        return "0";

        vector<int>res(num1.size() + num2.size() ,0);

        for(int i=num1.size()-1 ; i>=0 ; i--)
        {
            for(int j=num2.size() -1; j>=0; j--)
            {
                res[i+j+1] += (num1[i]-'0') * (num2[j]-'0');
                res[i+j] += res[i+j+1] /10;
                res[i + j + 1] %= 10;
            }
        }
        int i=0;
        string ans="";
        while(res[i] == 0)
        i++;
        while(i< res.size())
        ans+=to_string(res[i++]);

        return ans;
    }
};

