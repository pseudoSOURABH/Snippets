pattern 
        *
      *    * 
   *     *    *
we are given glasses ith row has i no of glasses and each glass can store 1 cup of wine . else wine will be poured to left and 
right glass . we will be given some quantity of wine and we have to find jth glass of ith row will contain what amount of wine . 
following is the code . 

double champagneTower(int poured, int query_row, int query_glass) {
        vector<double>currRow(1,poured);

        for(int i=0;i<=query_row ; i++)
        {
            vector<double>nextRow(i+2,0);
            for(int j=0;j<=i;j++)
            {
                if(currRow[j] >=1 )
                {
                    nextRow[j] +=(currRow[j]-1)/2.0;
                    nextRow[j+1]+=(currRow[j]-1)/2.0;
                    currRow[j]=1;
                }
            }
            if(i != query_row )
            currRow=nextRow;
        }
        return currRow[query_glass];
    }

* N-Queen Logic 
bool isSafe(int row , int col , vector<string>&board ,  int n)
{
    int r=row;
    int c=col;

    while(r>=0 && c>=0)
    {
        if(board[r][c]=='Q')
        return false;

        r--;
        c--;
    }
    r=row;
    c=col;

    while(c>=0 && r<n)
    {
        if(board[r][c]== 'Q')
        return false;

        r++;
        c--;
    }
    r=row;
    c=col;

    while(c>=0)
    {
        if(board[r][c] == 'Q')
        return false;

        c--;
    }

    return true;
}
void solve(int col ,vector<string>& board , vector<vector<string>> &ans , int n)
{
    if(col == n)
    {
        ans.push_back(board);

        return ;
    }

    for(int row = 0 ; row < n ; row++ )
    {
        if(isSafe(row , col , board , n))
        {
            board[row][col]='Q';
            solve(col+1,board,ans,n);
            board[row][col]='.';
        }
    }
}
    vector<vector<string>> solveNQueens(int n) {
        
        vector<vector<string>>ans;

        vector<string>board(n);

        string s(n,'.');

        for(int i=0;i<n;i++)
        {
            board[i]=s;
        }

        solve(0,board,ans,n);

        return ans;


    }
};
